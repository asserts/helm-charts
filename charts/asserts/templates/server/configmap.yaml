apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "asserts.serverFullname" . }}
  labels: {{- include "asserts.serverLabels" . | nindent 4 }}
    {{- with .Values.extraLabels }}
    {{- toYaml . | nindent 4 -}}
    {{- end }}
  {{- if .Values.annotations }}
  annotations:
  {{- toYaml .Values.annotations | nindent 4 -}}
  {{- end }}
data:
  application.yml: |-
    server:
      port: {{ .Values.server.service.port }}
      servlet:
        context-path: "/api-server"

    base:
      metrics:
        presence:
          check:
            enabled: true
            window: 24h
      rules:
        applicable:
          check:
            enabled: false

    # enable Prometheus metrics
    management:
      endpoint:
        health:
          show-details: when-authorized
        prometheus:
          enabled: true
      endpoints:
        web:
          exposure:
            include: info, health, prometheus
      metrics:
        distribution:
          percentiles-histogram:
            http:
              server:
                requests: true

    index:
      searchDefinition:
        refresh:
          fixedDelay: 1200000 # 20 minutes

    redis:
      search:
        pool:
          maxTotal: 20

    rules:
      root: file:///opt/asserts/
      pattern: model_rules/**/*.yml
      provider: local

    search:
      definition:
        path: "file:///opt/asserts/search-definitions/*.yml"
      store: local

    prometheus_client:
      metric:
        uri: "/assertion-metrics"

    proxy:
      grafana:
        prefix: http://localhost:{{ .Values.server.service.port }}/api-server/v1/grafana

    logging:
      level:
        root: INFO
      pattern:
        console: '%-5p %d{ISO8601,UTC}  %t  %c{0}  %mdc%n      %m%n%rEx'

    tenant:
      cache_seconds: 5

    asserts:
      identityprovider:
        # TODO: different tenant name?
        tenant: bootstrap
      tsdb:
        # TODO: do we just need the tsdb only or promxy?
        url: http://asserts-tsdb-server.asserts.svc.cluster.local.:8428
      oauth2:
        cookie:
          domain: localhost
          secure: false
      security:
        oauth2:
          internal:
            enabled: false
        permissions:
          - description: Read only user access
            name: USER
          - description: Can set rule thresholds
            name: RULE_THRESHOLD
          - description: Can manage alerts
            name: MANAGE_ALERTS
          - description: Can create custom dashboards
            name: CUSTOM_DASHBOARD
          - description: Can manage SLOs
            name: MANAGE_SLO
          - description: Can manage integrations
            name: MANAGE_INTEGRATIONS
          - description: Can list all users and roles
            name: LIST_USERS
          - description: Can change other user roles
            name: MANAGE_USER_ROLES
          - description: Can read raw tenant and base rules
            name: READ_TENANT_RULES
          - description: Can generate starting point for recording rules
            name: RULE_GENERATOR
          - description: Can manage other tenants
            name: TENANT_MANAGER
          - description: Can configure Prometheus rules
            name: CONFIG_PROM_RULES
          - description: Can (Dis/En)able Prometheus rules
            name: DISABLE_PROM_RULES
          - description: Can generate SLO rules
            name: GENERATE_SLO_RULES
          - description: Can create their own API access credentials
            name: ACCESS_KEY_ALLOWED
          - description: Can invite new users
            name: INVITE_USERS
          - description: Can configure Prometheus relabel rules
            name: CONFIG_RELABEL_RULES
          - description: Has admin privileges for Grafana api calls
            name: GRAFANA_ADMIN
          - description: Can configure AWS CloudWatch
            name: CONFIG_AWS_CLOUDWATCH
          - description: Can configure AWS exporter configuration
            name: CONFIG_AWS_EXPORTER
          - description: Can create/modify tenant OAuth2 configuration
            name: CONFIG_AUTH
        roleToPermissionMap:
          ASSERTS: "{OWNER}, {KNOWLEDGE_SENSOR}, RULE_GENERATOR, TENANT_MANAGER, GENERATE_SLO_RULES"
          ASSERTS_READONLY: "{VIEWER}"
          KNOWLEDGE_SENSOR: "READ_TENANT_RULES"
          OWNER: "{EDITOR}, MANAGE_USER_ROLES, DISABLE_PROM_RULES, INVITE_USERS, GRAFANA_ADMIN, CONFIG_AWS_CLOUDWATCH, CONFIG_AUTH"
          EDITOR: "{VIEWER}, RULE_THRESHOLD, MANAGE_ALERTS, CUSTOM_DASHBOARD, MANAGE_SLO, MANAGE_INTEGRATIONS, LIST_USERS, CONFIG_PROM_RULES, ACCESS_KEY_ALLOWED, CONFIG_RELABEL_RULES, CONFIG_AWS_EXPORTER"
          VIEWER: "USER"
        roles:
          - description: Owner
            name: OWNER
            visibility: PUBLIC
          - description: Editor
            name: EDITOR
            visibility: PUBLIC
          - description: Viewer
            name: VIEWER
            visibility: PUBLIC
          - description: Asserts Support
            name: ASSERTS
            visibility: INTERNAL
          - description: Asserts Read Only
            name: ASSERTS_READONLY
            visibility: INTERNAL
          - description: Knowledge Sensor
            name: KNOWLEDGE_SENSOR
            visibility: INTERNAL

    store:
      owner:
        datasource:
          hikari:
            maximum-pool-size: 1
          url: jdbc:postgresql://asserts-postgres.asserts.svc.cluster.local.:5432/asserts
          username: asserts
          password: super-secret
      user:
        datasource:
          url: ${store.owner.datasource.url}
          username: tenant_user
          password: secret

      keyValue: "local"
      fileSystem:
        rootDirectory: /opt/asserts/config
        mergedPromRulesDir: /opt/asserts/prom-rules
        relabelRulesDir: /opt/asserts/relabel-rules
        relabelRulesFile: relabel.yml

    spring:
      jackson:
        # exclude nulls from api responses
        default-property-inclusion: NON_NULL
      jpa:
        database: POSTGRESQL
        open-in-view: false
        properties:
          hibernate:
            dialect: org.hibernate.dialect.PostgreSQL92Dialect
            physical_naming_strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
            implicit_naming_strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
      liquibase:
        enabled: true
        changeLog: classpath:/db/changelog/db.changelog-enterprise.yaml
        parameters:
          database: asserts
          schema: public
          username: ${store.user.datasource.username}
          password: ${store.user.datasource.password}
          bootstrap_enabled: "true"

    prometheus:
      client:
        timeout: 30s
      metric:
        metadata:
          root: file:///opt/asserts/api-server/conf/prometheus/metric_metadata
      rules:
        provider: local
        root: file:///opt/asserts/prometheus/

    assertion:
      metric:
        specs:
          root: file:///opt/asserts/api-server/conf/
      ui:
        config:
          root: file:///opt/asserts/api-server/conf/

    cryptolens:
      authToken: "${ASSERTS_LICENSE_AUTH_TOKEN}"
      productId: "${ASSERTS_LICENSE_PRODUCT_ID}"
      licenseKey: "${ASSERTS_LICENSE_KEY}"


