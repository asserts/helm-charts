image:
  # TODO: change image, this is a local one for use with kind cluster
  # https://github.com/docker-library/postgres/pull/804/files
  repository: asserts/postgres
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

rbac:
  create: true

podSecurityContext:
  fsGroup: 1001

serviceAccount:
  create: true
  ## The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  name:
  # Secrets for the service accout
  imagePullSecrets: []

updateStrategy:
  type: RollingUpdate
  rollingUpdate: {}

# common annotations for all resources
annotations: {}

# extra labels for all resources
extraLabels: {}

# extra labels for the pod deployed
extraPodLabels: {}

# extra annotations for the pod deployed
extraPodAnnotations: {}

nodeSelector: {}

tolerations: []

affinity: {}

## wait 30 seconds before pod termination
## to allow application shut down
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle
#
terminationGracePeriodSeconds: 30

## auth.postgresPassword Password for the "postgres" admin user
## auth.username Name for a custom user to create
## auth.password Password for the custom user to create
## auth.database Name for a custom database to create
## auth.existingSecret Name of existing secret to use for PostgreSQL credentials
#
auth:
  # TODO: do we need the postgre user/password ??
  # enablePostgresUser: false
  # postgresPassword: ""
  username: "asserts"
  password: "super-secret"
  database: "asserts"
  existingSecret: ""

## TODO: see if we need this or if we will use the asserts image
## postgresqlSharedPreloadLibraries Shared preload libraries (comma-separated list)
##
# postgresSharedPreloadLibraries: "pgaudit,pg_stat_statements"

### init containers ###
initContainers:
  initChmodData: true
  containerSecurityContext:
    runAsUser: 0

### postgres primary container ###
primary:
  containerSecurityContext:
    runAsUser: 1001

  service:
    type: ClusterIP
    port: 5432

  resources: {}

  ## postgres Primary main configuration to be injected as ConfigMap
  ## ref: https://www.postgres.org/docs/current/static/runtime-config.html
  ##
  configuration: ""

  ## postgres Primary client authentication configuration
  ## ref: https://www.postgres.org/docs/current/static/auth-pg-hba-conf.html
  ## e.g:#
  ## pgHbaConfiguration: |-
  ##   local all all trust
  ##   host all all localhost trust
  ##   host mydatabase mysuser 192.168.0.0/24 md5
  ##
  pgHbaConfiguration: ""

  ## Name of an existing ConfigMap with postgres Primary configuration
  ## NOTE: `primary.configuration` and `primary.pgHbaConfiguration` will be ignored
  ##
  existingConfigmap: ""

  command: []

  args: []

  containerPort: 5432

  extraVolumeMounts: {}

  persistence:
    enabled: true
    path: /data

    ## Persistent Volume storage class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner
    #
    storageClass: ""

    # Persistent Volume access modes
    accessModes:
      - ReadWriteOnce

    # Persistent Volume size
    size: 8Gi

    # When set, will use the existing PVC for persistence
    existingClaim: ""

### postgres metrics container ###
metrics:
  enabled: true
  image:
    # TODO: switch to bitnami since this repo is no longer active?
    repository: wrouesnel/postgres_exporter
    pullPolicy: IfNotPresent
    tag: v0.8.0

  resources: {}

  service:
    port: 9187

  containerPort: 9187

  serviceMonitor:
    enabled: false
    namespace: ""
    interval: 30s
    scrapeTimeout: ""
    relabelings: []
    metricRelabelings: []
    honorLabels: false
