apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgres.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "postgres.labels" . | nindent 4 }}
    app.kubernetes.io/component: primary
    {{- with .Values.extraLabels }}
    {{- toYaml . | nindent 4 -}}
    {{- end }}
  {{- if .Values.annotations }}
  annotations:
  {{- toYaml .Values.annotations | nindent 4 -}}
  {{- end }}
spec:
  replicas: 1
  serviceName: {{ include "postgres.fullname" . }}
  {{- if .Values.updateStrategy }}
  updateStrategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "postgres.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: primary
  template:
    metadata:
      labels: {{- include "postgres.labels" . | nindent 8 }}
        app.kubernetes.io/component: primary
        {{- with .Values.extraPodLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        {{ if or (.Values.primary.configuration) (.Values.primary.pgHbaConfiguration) }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- if not .Values.auth.existingSecret }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- end }}
        {{- with .Values.extraPodAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      securityContext:
        fsGroup: {{ .Values.podSecurityContext.fsGroup }}
      serviceAccountName: {{ template "postgres.serviceAccountName" . }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- if .Values.initContainers.initChmodData }}
      initContainers:
        - name: init-chmod-data
          image: busybox
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -ec
            - |
              {{- if .Values.primary.persistence.enabled }}
              chown {{ .Values.primary.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }} {{ .Values.primary.persistence.path }}
              find {{ .Values.primary.persistence.path }} -mindepth 1 -maxdepth 1 | \
                xargs -r chown -R {{ .Values.primary.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }}
              {{- end }}
          securityContext:
            privileged: true
            runAsUser: {{ .Values.initContainers.containerSecurityContext.runAsUser }}
          volumeMounts:
            {{- if .Values.primary.persistence.enabled }}
            - name: data
              mountPath: {{ .Values.primary.persistence.path }}
            {{- end }}
      {{- end }}
      containers:
        - name: postgres
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{ with .Values.primary.command }}
          command: {{- toYaml . | nindent 12 }}
          {{- end }}
          {{ with .Values.primary.args }}
          args: {{- toYaml . | nindent 12 }}
          {{- end }}
          securityContext:
            runAsUser: {{ .Values.primary.containerSecurityContext.runAsUser }}
          env:
            - name: POSTGRES_USER
              value: {{ .Values.auth.username | quote }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.fullname" . }}
                  key: password
            - name: POSTGRES_DB
              value: {{ .Values.auth.database | quote }}
            {{- if .Values.primary.persistence.enabled }}
            - name: PGDATA
              value: {{ .Values.primary.persistence.path }}
            {{- end }}
          ports:
            - name: postgres
              containerPort: {{ .Values.primary.containerPort }}
          resources: {{- toYaml .Values.primary.resources | nindent 12 }}
          volumeMounts:
            {{- if .Values.primary.persistence.enabled }}
            - name: data
              mountPath: {{ .Values.primary.persistence.path }}
              readOnly: false
            {{- end }}
            {{- if or .Values.primary.configuration .Values.primary.pgHbaConfiguration .Values.primary.existingConfigmap }}
            - name: postgres-config
              mountPath: /etc/postgresql
            {{- end }}
          {{- with .Values.primary.extraVolumeMounts }}
          {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- if .Values.metrics.enabled }}
        - name: metrics
          image: "{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}"
          imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
          env:
            - name: DATA_SOURCE_URI
              value: "127.0.0.1:{{ .Values.primary.service.port }}/?sslmode=disable"
            - name: DATA_SOURCE_USER
              value: {{ .Values.auth.username | quote }}
            - name: DATA_SOURCE_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.fullname" . }}
                  key: password
            - name: PG_EXPORTER_EXTEND_QUERY_PATH
              value: /conf/config.yaml
            # TODO: add condition if using rds?
            - name: PG_EXPORTER_EXCLUDE_DATABASES
              value: rdsadmin
            - name: PG_EXPORTER_AUTO_DISCOVER_DATABASES
              value: "true"
          ports:
            - name: metrics
              containerPort: {{ .Values.metrics.containerPort }}
          volumeMounts:
            - name: metrics
              mountPath: /conf
              readOnly: true
          resources: {{- toYaml .Values.metrics.resources | nindent 12 }}
        {{- end }}
      volumes:
        {{- if or .Values.primary.configuration .Values.primary.pgHbaConfiguration .Values.primary.existingConfigmap }}
        - name: postgres-config
          configMap:
            name: {{ include "postgres.fullname" . }}
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.metrics.enabled }}
        - name: metrics
          configMap:
            name: "{{ include "postgres.fullname" . }}-metrics"
        {{- end }}
  {{- if not .Values.primary.persistence.enabled }}
        - name: data
          emptyDir: {}
  {{- else if .Values.primary.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ .Values.primary.persistence.existingClaim }}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: {{- include "postgres.labels" . | nindent 10 }}
          app.kubernetes.io/component: primary
      spec:
        accessModes:
        {{- range .Values.primary.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.primary.persistence.size | quote }}
        {{ include "postgres.storageClass"  . }}
  {{- end }}
